rake1 = rake(design = svy1, sample.margins = list(~X1,~X2,~X3,~X4),
population.margins = list(X1_margin, X2_margin, X3_margin, X4_margin))
## raked weights ####
samp_data$wts = weights(rake1)
## factorise the relevant variables
str(samp_data)
ind = c(1:4,6)
samp_data[,ind] = apply(samp_data[,ind], 2, function(x)as.factor(x))
## the rest of the models ####
model5 = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model6 = brm(bin_value ~ (1|X1) + (1|X3), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model7 = brm(bin_value ~ (1|X1) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model8 = brm(bin_value ~ (1|X2) + (1|X3), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model9 = brm(bin_value ~ (1|X2) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model10 = brm(bin_value ~ (1|X3) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model11 = brm(bin_value ~ (1|X1) + (1|X2) + (1|X3), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model12 = brm(bin_value ~ (1|X1) + (1|X2) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model13 = brm(bin_value ~ (1|X1) + (1|X3) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model14 = brm(bin_value ~ (1|X2) + (1|X3) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model15 = brm(bin_value ~ (1|X1) + (1|X2) + (1|X3) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
## comparing loo for the models, with weights and without weights
# calculating loo
loo5 <- loo(model5)
loo6 <- loo(model6)
loo7 <- loo(model7)
loo8 <- loo(model8)
loo9 <- loo(model9)
loo10 <- loo(model10)
loo11 <- loo(model11)
loo12 <- loo(model12)
loo13 <- loo(model13)
loo14 <- loo(model14)
loo15 <- loo(model15)
loo_doub = list(loo5, loo6, loo7, loo8, loo9, loo10, loo15)
loo_trip = list(loo11, loo12, loo13, loo14, loo15)
## extracting loo estimates to rank them
loo_doub_tab = lapply(loo_doub,function(x)x$estimates[1,]) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_doub_rank = rank(-loo_doub_tab[,1])) %>%
rename(elpd_loo = Estimate)
rownames(loo_doub_tab) = c(paste0('model', c(5:10,15)))
loo_trip_tab = lapply(loo_trip,function(x)x$estimates[1,]) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_trip_rank = rank(-loo_trip_tab[,1])) %>%
rename(elpd_loo = Estimate)
rownames(loo_trip_tab) = c(paste0('model', 11:15))
# creating survey raked weights
svy_rake = svydesign(ids=~1, # cluster id, ~1 for no clusters
weights=~wts, # including raked weights in the survey design
data=samp_data)
loo_wtd_doub_tab = lapply(loo_doub, function(x)loo_wtd(x,svy_rake)) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_wtd_doub_rank =  rank(-loo_wtd_doub_tab[,1]))
rownames(loo_wtd_doub_tab) =  c(paste0('model', c(5:10,15)))
loo_wtd_trip_tab = lapply(loo_trip, function(x)loo_wtd(x,svy_rake)) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_wtd_trip_rank =  rank(-loo_wtd_trip_tab[,1]))
rownames(loo_wtd_trip_tab) =  c(paste0('model', c(11:15)))
sim_doub_list[[i]] = cbind(loo_doub_tab, loo_wtd_doub_tab) %>%
arrange(., loo_wtd_doub_rank)
sim_trip_list[[i]] = cbind(loo_trip_tab, loo_wtd_trip_tab) %>%
arrange(., loo_wtd_trip_rank)
samp_data <- samp_data %>%
mutate(elpd_5 = loo5$pointwise[,1],
elpd_6 = loo6$pointwise[,1],
elpd_7 = loo7$pointwise[,1],
elpd_8 = loo8$pointwise[,1],
elpd_9 = loo9$pointwise[,1],
elpd_10 = loo10$pointwise[,1],
elpd_11 = loo11$pointwise[,1],
elpd_12 = loo12$pointwise[,1],
elpd_13 = loo13$pointwise[,1],
elpd_14 = loo14$pointwise[,1],
elpd_15 = loo15$pointwise[,1])
samp_data_list[[i]] = samp_data
if (i%%5 == 0){
save(samp_data_list, sim_doub_list, sim_trip_list, file="simulated100temp2.RData")
}else{}
}
## extracting loo estimates to rank them
loo_doub_tab = lapply(loo_doub,function(x)x$estimates[1,]) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_doub_rank = rank(-loo_doub_tab[,1])) %>%
rename(elpd_loo = Estimate)
## extracting loo estimates to rank them
loo_doub_tab = lapply(loo_doub,function(x)x$estimates[1,]) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_doub_rank = rank(-.[,1])) %>%
rename(elpd_loo = Estimate)
rownames(loo_doub_tab) = c(paste0('model', c(5:10,15)))
loo_trip_tab = lapply(loo_trip,function(x)x$estimates[1,]) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_trip_rank = rank(-.[,1])) %>%
rename(elpd_loo = Estimate)
rownames(loo_trip_tab) = c(paste0('model', 11:15))
# creating survey raked weights
svy_rake = svydesign(ids=~1, # cluster id, ~1 for no clusters
weights=~wts, # including raked weights in the survey design
data=samp_data)
loo_wtd_doub_tab = lapply(loo_doub, function(x)loo_wtd(x,svy_rake)) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_wtd_doub_rank =  rank(-loo_wtd_doub_tab[,1]))
rownames(loo_wtd_doub_tab) =  c(paste0('model', c(5:10,15)))
loo_wtd_doub_tab = lapply(loo_doub, function(x)loo_wtd(x,svy_rake)) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_wtd_doub_rank =  rank(-.[,1]))
rownames(loo_wtd_doub_tab) =  c(paste0('model', c(5:10,15)))
loo_wtd_trip_tab = lapply(loo_trip, function(x)loo_wtd(x,svy_rake)) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_wtd_trip_rank =  rank(-.[,1]))
rownames(loo_wtd_trip_tab) =  c(paste0('model', c(11:15)))
sim_doub_list[[i]] = cbind(loo_doub_tab, loo_wtd_doub_tab) %>%
arrange(., loo_wtd_doub_rank)
sim_trip_list[[i]] = cbind(loo_trip_tab, loo_wtd_trip_tab) %>%
arrange(., loo_wtd_trip_rank)
sim_doub_list
sim_doub_list[[i]]
sim_trip_list[[i]] = cbind(loo_trip_tab, loo_wtd_trip_tab) %>%
arrange(., loo_wtd_trip_rank)
samp_data <- samp_data %>%
mutate(elpd_5 = loo5$pointwise[,1],
elpd_6 = loo6$pointwise[,1],
elpd_7 = loo7$pointwise[,1],
elpd_8 = loo8$pointwise[,1],
elpd_9 = loo9$pointwise[,1],
elpd_10 = loo10$pointwise[,1],
elpd_11 = loo11$pointwise[,1],
elpd_12 = loo12$pointwise[,1],
elpd_13 = loo13$pointwise[,1],
elpd_14 = loo14$pointwise[,1],
elpd_15 = loo15$pointwise[,1])
samp_data_list[[i]] = samp_data
i
for (i in 2:3){
samp_size = 500
samp_loc = sample(1:nrow(popn_data), size = samp_size, replace=F, prob = popn_data$inclusion)
samp_data = popn_data[samp_loc,]
## creating survey design
svy1 = svydesign(ids=~1, # cluster id, ~1 for no clusters
weights=~rep(1,nrow(samp_data)), # equal weights for each unit
data=samp_data)
## calculating population totals for each level
X1_margin = xtabs(~X1, data=popn_data)
X2_margin = xtabs(~X2, data=popn_data)
X3_margin = xtabs(~X3, data=popn_data)
X4_margin = xtabs(~X4, data=popn_data)
## raked to the population
rake1 = rake(design = svy1, sample.margins = list(~X1,~X2,~X3,~X4),
population.margins = list(X1_margin, X2_margin, X3_margin, X4_margin))
## raked weights ####
samp_data$wts = weights(rake1)
## factorise the relevant variables
str(samp_data)
ind = c(1:4,6)
samp_data[,ind] = apply(samp_data[,ind], 2, function(x)as.factor(x))
## the rest of the models ####
model5 = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model6 = brm(bin_value ~ (1|X1) + (1|X3), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model7 = brm(bin_value ~ (1|X1) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model8 = brm(bin_value ~ (1|X2) + (1|X3), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model9 = brm(bin_value ~ (1|X2) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model10 = brm(bin_value ~ (1|X3) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model11 = brm(bin_value ~ (1|X1) + (1|X2) + (1|X3), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model12 = brm(bin_value ~ (1|X1) + (1|X2) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model13 = brm(bin_value ~ (1|X1) + (1|X3) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model14 = brm(bin_value ~ (1|X2) + (1|X3) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model15 = brm(bin_value ~ (1|X1) + (1|X2) + (1|X3) + (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
## comparing loo for the models, with weights and without weights
# calculating loo
loo5 <- loo(model5)
loo6 <- loo(model6)
loo7 <- loo(model7)
loo8 <- loo(model8)
loo9 <- loo(model9)
loo10 <- loo(model10)
loo11 <- loo(model11)
loo12 <- loo(model12)
loo13 <- loo(model13)
loo14 <- loo(model14)
loo15 <- loo(model15)
loo_doub = list(loo5, loo6, loo7, loo8, loo9, loo10, loo15)
loo_trip = list(loo11, loo12, loo13, loo14, loo15)
## extracting loo estimates to rank them
loo_doub_tab = lapply(loo_doub,function(x)x$estimates[1,]) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_doub_rank = rank(-.[,1])) %>%
rename(elpd_loo = Estimate)
rownames(loo_doub_tab) = c(paste0('model', c(5:10,15)))
loo_trip_tab = lapply(loo_trip,function(x)x$estimates[1,]) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_trip_rank = rank(-.[,1])) %>%
rename(elpd_loo = Estimate)
rownames(loo_trip_tab) = c(paste0('model', 11:15))
# creating survey raked weights
svy_rake = svydesign(ids=~1, # cluster id, ~1 for no clusters
weights=~wts, # including raked weights in the survey design
data=samp_data)
loo_wtd_doub_tab = lapply(loo_doub, function(x)loo_wtd(x,svy_rake)) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_wtd_doub_rank =  rank(-.[,1]))
rownames(loo_wtd_doub_tab) =  c(paste0('model', c(5:10,15)))
loo_wtd_trip_tab = lapply(loo_trip, function(x)loo_wtd(x,svy_rake)) %>%
do.call(rbind,.) %>%
data.frame(.) %>%
mutate(loo_wtd_trip_rank =  rank(-.[,1]))
rownames(loo_wtd_trip_tab) =  c(paste0('model', c(11:15)))
sim_doub_list[[i]] = cbind(loo_doub_tab, loo_wtd_doub_tab) %>%
arrange(., loo_wtd_doub_rank)
sim_trip_list[[i]] = cbind(loo_trip_tab, loo_wtd_trip_tab) %>%
arrange(., loo_wtd_trip_rank)
samp_data <- samp_data %>%
mutate(elpd_5 = loo5$pointwise[,1],
elpd_6 = loo6$pointwise[,1],
elpd_7 = loo7$pointwise[,1],
elpd_8 = loo8$pointwise[,1],
elpd_9 = loo9$pointwise[,1],
elpd_10 = loo10$pointwise[,1],
elpd_11 = loo11$pointwise[,1],
elpd_12 = loo12$pointwise[,1],
elpd_13 = loo13$pointwise[,1],
elpd_14 = loo14$pointwise[,1],
elpd_15 = loo15$pointwise[,1])
samp_data_list[[i]] = samp_data
if (i%%5 == 0){
save(samp_data_list, sim_doub_list, sim_trip_list, file="simulated100temp2.RData")
}else{}
}
sim_trip_list[[i]]
i
i=2
sim_trip_list[[i]]
sim_doub_list[[i]]
loo_compare_wtd <- function(x, svydesign_obj, ...) {
if (is.loo(x)) {
dots <- list(...)
loos <- c(list(x), dots)
} else {
if (!is.list(x) || !length(x)) {
stop("'x' must be a list if not a 'loo' object.")
}
if (length(list(...))) {
stop("If 'x' is a list then '...' should not be specified.")
}
loos <- x
}
# If subsampling is used
if (any(sapply(loos, inherits, "psis_loo_ss"))) {
return(loo_compare.psis_loo_ss_list(loos))
}
loo_compare_checks(loos)
comp <- loo_compare_matrix(loos)
ord <- loo_compare_order(loos)
# compute elpd_diff and se_elpd_diff relative to best model
rnms <- rownames(comp)
diffs <- mapply(FUN = elpd_diffs, loos[ord[1]], loos[ord])
elpd_diff <- apply(diffs, 2, function(x)svytotal(x, svydesign_obj))
se_diff <- apply(diffs, 2, se_elpd_diff)
comp <- cbind(elpd_diff = elpd_diff, se_diff = se_diff, comp)
rownames(comp) <- rnms
class(comp) <- c("compare.loo", class(comp))
return(comp)
}
loo_compare_wtd_bf <- function(x, ...) {
if (is.loo(x)) {
dots <- list(...)
loos <- c(list(x), dots)
} else {
if (!is.list(x) || !length(x)) {
stop("'x' must be a list if not a 'loo' object.")
}
if (length(list(...))) {
stop("If 'x' is a list then '...' should not be specified.")
}
loos <- x
}
# If subsampling is used
if (any(sapply(loos, inherits, "psis_loo_ss"))) {
return(loo_compare.psis_loo_ss_list(loos))
}
loo_compare_checks(loos)
comp <- loo_compare_matrix(loos)
ord <- loo_compare_order(loos)
# compute elpd_diff and se_elpd_diff relative to best model
rnms <- rownames(comp)
diffs <- mapply(FUN = elpd_diffs, loos[ord[1]], loos[ord])
elpd_diff <- apply(diffs, 2, function(x)svytotal(x, svy_rake))
se_diff <- apply(diffs, 2, se_elpd_diff)
comp <- cbind(elpd_diff = elpd_diff, se_diff = se_diff, comp)
rownames(comp) <- rnms
class(comp) <- c("compare.loo", class(comp))
return(comp)
}
loo_compare(loo5,loo6)
loo_compare(loo6,loo5)
loo_compare_wtd_bf(loo5,loo6)
source("~/Documents/GitHub/LOO_MRP/01-code/loo_compare_wtd_prototype.R")
loo_compare_wtd_bf(loo5,loo6)
loo_compare_wtd(loo5,loo6, svy_rake)
loo_compare_wtd(list(loo5,loo6), svy_rake)
loo_compare_wtd(list(loo6,loo5), svy_rake)
loo_compare_wtd(list(loo6,loo5, loo7), svy_rake)
loo_compare(loo5,loo6,loo7)
samp_data_list
samp_data_list[[1]]
names(samp_data_list[[1]])
samp_data_list[[1]]$elpd_15
samp_data = samp_data_list[[1]]
names(samp_data)
ggplot(samp_data, aes(x=X1, y=elpd_15)) + geom_boxplot()
ggplot(samp_data, aes(x=X2, y=elpd_15)) + geom_boxplot()
ggplot(samp_data, aes(x=X3, y=elpd_15)) + geom_boxplot()
ggplot(samp_data, aes(x=X4, y=elpd_15)) + geom_boxplot()
ggplot(samp_data, aes(x=X4, y=elpd_15)) + geom_boxplot() + facet_grid(~X2)
ggplot(samp_data, aes(x=X2, y=elpd_15)) + geom_boxplot() + facet_grid(~X4)
ggplot(samp_data, aes(x=X2, y=elpd_15)) + geom_boxplot() + facet_grid(~X3)
ggplot(samp_data, aes(x=X2, y=elpd_15)) + geom_boxplot() + facet_grid(~X1)
ggplot(samp_data, aes(x=X1, y=elpd_15)) + geom_boxplot() + facet_grid(~X1)
ggplot(samp_data, aes(x=X1, y=elpd_15)) + geom_boxplot() + facet_grid(~X3)
ggplot(samp_data, aes(x=X3, y=elpd_15)) + geom_boxplot() + facet_grid(~X1)
View(popn_data)
table(samp_data$X1)
table(samp_data$X2)
table(samp_data$X3)
table(samp_data$X4)
table(samp_data$X5)
table(popn_data$X1)
table(popn_data$X2)
table(popn_data$X3)
table(popn_data$X4)
ggplot(samp_data, aes(x=X4, y=elpd_15)) + geom_boxplot() + facet_grid(~X2)
ggplot(samp_data, aes(x=X2, y=elpd_15)) + geom_boxplot() + facet_grid(~X4)
ggplot(samp_data, aes(x=X4, y=elpd_15)) + geom_boxplot()
head(samp_data)
ggplot(samp_data, aes(x=X2, y=elpd_15)) + geom_boxplot() + facet_grid(~X4)
ggplot(samp_data, aes(x=X2, y=elpd_15)) + geom_boxplot() + facet_grid(~X4)
ggplot(samp_data, aes(x=X4, y=elpd_15)) + geom_boxplot() + facet_grid(~X2)
ggplot(samp_data, aes(x=X1, y=elpd_15)) + geom_boxplot() + facet_grid(~X3)
ggplot(samp_data, aes(x=X1, y=elpd_15)) + geom_boxplot() + facet_grid(~X4)
+ facet_grid(~X4)
samp_data$X1 == 5
which(samp_data$X1 == 5)
test = samp_data
test$X1[which(test$X1 == 5)]
test$X1[which(test$X1 == 5)] = "2"
ggplot(test, aes(x=X1, y=elpd_15)) + geom_boxplot() + facet_grid(~X4)
ggplot(samp_data, aes(x=X1, y=elpd_15)) + geom_boxplot() + facet_grid(~X4)
ggplot(samp_data, aes(x=X4, y=elpd_15)) + geom_boxplot() + facet_grid(~X1)
ggplot(samp_data, aes(x=X4, y=elpd_15)) + geom_boxplot() + facet_grid(~X3)
ggplot(samp_data, aes(x=X4, y=elpd_15)) + geom_boxplot() + facet_grid(~X2)
ggplot(samp_data, aes(x=X1, y=elpd_15)) + geom_boxplot() + facet_grid(~X4)
table(samp_data_list[[29]$X2])
table(samp_data_list[[29]]$X2)
samp_data_list[[29]]
samp_data_list[[12]]
load("~/Documents/GitHub/LOO_MRP/01-code/models05-15/simulated30temp_2_1.RData")
samp_data_list[[12]]
table(samp_data_list[[29]]$X2)
table(samp_data_list[[29]]$X4)
table(samp_data_list[[29]]$X1)
table(samp_data_list[[29]]$X3)
table(popn_data$X2)
table(popn_data$X4)
table(popn_data$X1)
table(popn_data$X3)
load("~/Documents/GitHub/LOO_MRP/01-code/models05-15/simulated30temp_2_1.RData")
sim_trip_list[1:30]
N = nrow(samp_data_list[[1]])
sim_list2 = sim_trip_list[1:30]
loo_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'loo_trip_rank'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model11", "model12", "model13", "model14", "model15")) %>%
melt(.) %>%
group_by(Var2) %>%
count(value) %>%
mutate(value, value = factor(value, levels= c("1", "2", "3", "4", "5"))) %>%
mutate(n, freq = as.numeric(n))  %>%
rename(Model = Var2)
loo_wtd_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'loo_wtd_trip_rank'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model11", "model12", "model13", "model14", "model15")) %>%
melt(.) %>%
group_by(Var2) %>%
count(value) %>%
mutate(value, value = factor(value, levels= c("1", "2", "3", "4", "5"))) %>%
mutate(n, freq = as.numeric(n))  %>%
rename(Model = Var2)
ggplot(loo_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "Dark2") +
labs(title='Unweighted LOO', x="Ranking")
library(dplyr)
library(magrittr)
library(ggplot2)
library(reshape2)
ggplot(loo_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "Dark2") +
labs(title='Unweighted LOO', x="Ranking")
loo_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'loo_trip_rank'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model11", "model12", "model13", "model14", "model15")) %>%
melt(.) %>%
group_by(Var2) %>%
count(value) %>%
mutate(value, value = factor(value, levels= c("1", "2", "3", "4", "5"))) %>%
mutate(n, freq = as.numeric(n))  %>%
rename(Model = Var2)
loo_wtd_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'loo_wtd_trip_rank'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model11", "model12", "model13", "model14", "model15")) %>%
melt(.) %>%
group_by(Var2) %>%
count(value) %>%
mutate(value, value = factor(value, levels= c("1", "2", "3", "4", "5"))) %>%
mutate(n, freq = as.numeric(n))  %>%
rename(Model = Var2)
ggplot(loo_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "Dark2") +
labs(title='Unweighted LOO', x="Ranking")
dev.off()
ggplot(loo_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "Dark2") +
labs(title='Unweighted LOO', x="Ranking")
