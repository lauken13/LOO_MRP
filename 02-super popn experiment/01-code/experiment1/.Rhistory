geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "RdYlGn")+
labs(title='Weighted LOO', x="Ranking")
load("~/Documents/GitHub/LOO_MRP/01-code/popn3/simulated100temp_1.RData")
sim_list
load("~/Documents/GitHub/LOO_MRP/01-code/popn3/simulated100temp_2.RData")
sim_doub_list
library(dplyr)
library(magrittr)
library(ggplot2)
library(reshape2)
sim_list2 = sim_doub_list[1:8]
loo_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'loo_doub_rank'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model10", "model15", "model05", "model06", "model07", "model08", "model09")) %>%
melt(.) %>%
group_by(Var2) %>%
count(value) %>%
mutate(value, value = factor(value, levels= c("1", "2", "3", "4", "5", "6", "7"))) %>%
mutate(n, freq = as.numeric(n))  %>%
rename(Model = Var2) %>%
mutate(Model = factor(Model, levels=c("model05", "model06", "model07", "model08", "model09", "model10", "model15")))
sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'loo_doub_rank']))
sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),])
loo_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'loo_doub_rank'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model10", "model15", "model05", "model06", "model07", "model08", "model09")) %>%
melt(.) %>%
group_by(Var2) %>%
count(value) %>%
mutate(value, value = factor(value, levels= c("1", "2", "3", "4", "5", "6", "7"))) %>%
mutate(n, freq = as.numeric(n))  %>%
rename(Model = Var2) %>%
mutate(Model = factor(Model, levels=c("model05", "model06", "model07", "model08", "model09", "model10", "model15")))
loo_wtd_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'loo_wtd_doub_rank'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model10", "model15", "model05", "model06", "model07", "model08", "model09")) %>%
melt(.) %>%
group_by(Var2) %>%
count(value) %>%
mutate(value, value = factor(value, levels= c("1", "2", "3", "4", "5", "6", "7"))) %>%
mutate(n, freq = as.numeric(n)) %>%
rename(Model = Var2) %>%
mutate(Model = factor(Model, levels=c("model05", "model06", "model07", "model08", "model09", "model10", "model15")))
ggplot(loo_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "Dark2") +
labs(title='Unweighted LOO', x="Ranking")
ggplot(loo_wtd_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "RdYlGn")+
labs(title='Weighted LOO', x="Ranking")
# plotting raw elpd values ------------------------------------------------
# unweighted
loo_elpd_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'elpd_loo'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model10", "model15", "model05", "model06", "model07", "model08", "model09")) %>%
melt(.) %>%
rename(Model = Var2) %>%
mutate(Model = factor(Model, levels=c("model05", "model06", "model07", "model08", "model09", "model10", "model15")))
gg1 = ggplot(loo_elpd_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Unweighted elpd") +
scale_fill_brewer(palette = "Dark2")
# weighted
loo_wtd_elpd_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'wtd_elpd_loo'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model10", "model15", "model05", "model06", "model07", "model08", "model09")) %>%
melt(.) %>%
rename(Model = Var2) %>%
mutate(Model = factor(Model, levels=c("model05", "model06", "model07", "model08", "model09", "model10", "model15")))
gg2 = ggplot(loo_wtd_elpd_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Weighted elpd")  +
scale_fill_brewer(palette = "RdYlGn")
gridExtra::grid.arrange(gg1,gg2)
# plotting raw se elpd values ------------------------------------------------
# unweighted
loo_se_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'SE'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model10", "model15", "model05", "model06", "model07", "model08", "model09")) %>%
melt(.) %>%
rename(Model = Var2) %>%
mutate(Model = factor(Model, levels=c("model05", "model06", "model07", "model08", "model09", "model10", "model15")))
gg1 = ggplot(loo_se_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Unweighted std. error") +
scale_fill_brewer(palette = "Dark2")
# weighted
loo_wtd_se_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'wtd_SE'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model10", "model15", "model05", "model06", "model07", "model08", "model09")) %>%
melt(.) %>%
rename(Model = Var2) %>%
mutate(Model = factor(Model, levels=c("model05", "model06", "model07", "model08", "model09", "model10", "model15")))
gg2 = ggplot(loo_wtd_se_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Weighted std. error") +
scale_fill_brewer(palette = "RdYlGn")
gridExtra::grid.arrange(gg1,gg2)
getwd()
setwd("~/Documents/GitHub/LOO_MRP/01-code/popn3")
png(file="loo_elpd_se_0510.png", width=600, height=790)
gridExtra::grid.arrange(gg1,gg2)
dev.off()
# plotting raw elpd values ------------------------------------------------
# unweighted
loo_elpd_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'elpd_loo'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model10", "model15", "model05", "model06", "model07", "model08", "model09")) %>%
melt(.) %>%
rename(Model = Var2) %>%
mutate(Model = factor(Model, levels=c("model05", "model06", "model07", "model08", "model09", "model10", "model15")))
gg1 = ggplot(loo_elpd_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Unweighted elpd") +
scale_fill_brewer(palette = "Dark2")
# weighted
loo_wtd_elpd_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'wtd_elpd_loo'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model10", "model15", "model05", "model06", "model07", "model08", "model09")) %>%
melt(.) %>%
rename(Model = Var2) %>%
mutate(Model = factor(Model, levels=c("model05", "model06", "model07", "model08", "model09", "model10", "model15")))
gg2 = ggplot(loo_wtd_elpd_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Weighted elpd")  +
scale_fill_brewer(palette = "RdYlGn")
png(file="loo_elpd_0510.png", width=600, height=790)
gridExtra::grid.arrange(gg1,gg2)
dev.off()
ggplot(loo_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "Dark2") +
labs(title='Unweighted LOO', x="Ranking")
png(filename="loo_doub_unwtd.png", width=550, height=500)
ggplot(loo_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "Dark2") +
labs(title='Unweighted LOO', x="Ranking")
dev.off()
png(filename="loo_doub_wtd.png", width=550, height=500)
ggplot(loo_wtd_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "RdYlGn")+
labs(title='Weighted LOO', x="Ranking")
dev.off()
sim_list2 = sim_trip_list[1:19]
sim_list2
sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),])
sim_list2 = sim_trip_list[1:19]
sim_list2
sim_list2 = sim_trip_list[1:8]
sim_list2
loo_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'loo_trip_rank'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model11", "model12", "model13", "model14", "model15")) %>%
melt(.) %>%
group_by(Var2) %>%
count(value) %>%
mutate(value, value = factor(value, levels= c("1", "2", "3", "4", "5"))) %>%
mutate(n, freq = as.numeric(n))  %>%
rename(Model = Var2)
loo_wtd_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'loo_wtd_trip_rank'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model11", "model12", "model13", "model14", "model15")) %>%
melt(.) %>%
group_by(Var2) %>%
count(value) %>%
mutate(value, value = factor(value, levels= c("1", "2", "3", "4", "5"))) %>%
mutate(n, freq = as.numeric(n))  %>%
rename(Model = Var2)
ggplot(loo_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "Dark2") +
labs(title='Unweighted LOO', x="Ranking")
ggplot(loo_wtd_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "RdYlGn")+
labs(title='Weighted LOO', x="Ranking")
getwd()
png(filename="loo_trip_unwtd.png", width=550, height=500)
ggplot(loo_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "Dark2") +
labs(title='Unweighted LOO', x="Ranking")
dev.off()
png(filename="loo_trip_wtd.png", width=550, height=500)
ggplot(loo_wtd_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "RdYlGn")+
labs(title='Weighted LOO', x="Ranking")
dev.off()
# plotting raw elpd values ------------------------------------------------
# unweighted
loo_elpd_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'elpd_loo'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model11", "model12", "model13", "model14", "model15")) %>%
melt(.) %>%
rename(Model = Var2)
gg1 = ggplot(loo_elpd_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Unweighted elpd") +
scale_fill_brewer(palette = "Dark2")
# weighted
loo_wtd_elpd_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'wtd_elpd_loo'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model11", "model12", "model13", "model14", "model15")) %>%
melt(.) %>%
rename(Model = Var2)
gg2 = ggplot(loo_wtd_elpd_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Weighted elpd")  +
scale_fill_brewer(palette = "RdYlGn")
gridExtra::grid.arrange(gg1,gg2)
png(file="loo_elpd_1115.png", width=600, height=790)
gridExtra::grid.arrange(gg1,gg2)
dev.off()
# plotting raw se elpd values ------------------------------------------------
# unweighted
loo_se_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'SE'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model11", "model12", "model13", "model14", "model15")) %>%
melt(.) %>%
rename(Model = Var2)
gg1 = ggplot(loo_se_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Unweighted std. error") +
scale_fill_brewer(palette = "Dark2")
# weighted
loo_wtd_se_tab = sim_list2 %>%
lapply(., function(x)x[sort(rownames(x)),]) %>%
lapply(., function(x)(x[,'wtd_SE'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model11", "model12", "model13", "model14", "model15")) %>%
melt(.) %>%
rename(Model = Var2)
gg2 = ggplot(loo_wtd_se_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Weighted std. error") +
scale_fill_brewer(palette = "RdYlGn")
png(file="loo_elpd_se_1115.png", width=600, height=790)
gridExtra::grid.arrange(gg1,gg2)
dev.off()
load("~/Documents/GitHub/LOO_MRP/01-code/popn3/simulated19temp_1.RData")
sim_list[1:50]
sim_list2 = sim_list[1:19]
loo_tab = sim_list2 %>%
lapply(., function(x)(x[,'loo_rank'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model1", "model2", "model3", "model4")) %>%
melt(.) %>%
group_by(Var2) %>%
count(value) %>%
mutate(value, value = factor(value, levels= c("1", "2", "3", "4"))) %>%
mutate(n, freq = as.numeric(n))  %>%
rename(Model = Var2)
loo_wtd_tab = sim_list2 %>%
lapply(., function(x)(x[,'loo_wtd_rank'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model1", "model2", "model3", "model4")) %>%
melt(.) %>%
group_by(Var2) %>%
count(value) %>%
mutate(value, value = factor(value, levels= c("1", "2", "3", "4"))) %>%
mutate(n, freq = as.numeric(n)) %>%
rename(Model = Var2)
ggplot(loo_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "Dark2") +
labs(title='Unweighted LOO', x="Ranking")
ggplot(loo_wtd_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "RdYlGn")+
labs(title='Weighted LOO', x="Ranking")
png(filename="loo_unwtd_0104.png", width=550, height=500)
ggplot(loo_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "Dark2") +
labs(title='Unweighted LOO', x="Ranking")
dev.off()
png(filename="loo_wtd_0104.png", width=550, height=500)
ggplot(loo_wtd_tab, aes(value, freq, fill=Model)) +
geom_bar(stat="identity") +
facet_wrap(.~Model, ncol=2) +  scale_fill_brewer(palette = "RdYlGn")+
labs(title='Weighted LOO', x="Ranking")
dev.off()
# unweighted
loo_elpd_tab = sim_list2 %>%
lapply(., function(x)(x[,'elpd_loo'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model1", "model2", "model3", "model4")) %>%
melt(.) %>%
rename(Model = Var2)
gg1 = ggplot(loo_elpd_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Unweighted elpd") +
scale_fill_brewer(palette = "Dark2")
# weighted
loo_wtd_elpd_tab = sim_list2 %>%
lapply(., function(x)(x[,'wtd_elpd_loo'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model1", "model2", "model3", "model4")) %>%
melt(.) %>%
rename(Model = Var2)
gg2 = ggplot(loo_wtd_elpd_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Weighted elpd")  +
scale_fill_brewer(palette = "RdYlGn")
gridExtra::grid.arrange(gg1,gg2)
png(file="loo_elpd_0104.png", width=600, height=790)
gridExtra::grid.arrange(gg1,gg2)
dev.off()
# unweighted
loo_se_tab = sim_list2 %>%
lapply(., function(x)(x[,'SE'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model1", "model2", "model3", "model4")) %>%
melt(.) %>%
rename(Model = Var2)
gg1 = ggplot(loo_se_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Unweighted std. error") +
scale_fill_brewer(palette = "Dark2")
# weighted
loo_wtd_se_tab = sim_list2 %>%
lapply(., function(x)(x[,'wtd_SE'])) %>%
do.call(rbind, .) %>%
set_colnames(c("model1", "model2", "model3", "model4")) %>%
melt(.) %>%
rename(Model = Var2)
gg2 = ggplot(loo_wtd_se_tab, aes(Model, value, fill=Model)) +
geom_violin() + labs(title="Weighted std. error") +
scale_fill_brewer(palette = "RdYlGn")
gridExtra::grid.arrange(gg1,gg2)
png(file="loo_elpd_se_0104.png", width=600, height=790)
gridExtra::grid.arrange(gg1,gg2)
dev.off()
load("~/Documents/GitHub/LOO_MRP/01-code/popn2/simulated50temp_1.RData")
load("~/Documents/GitHub/LOO_MRP/01-code/popn2/simulated14temp_2.RData")
i = 1
ITE = 100
sim_list = lapply(1:ITE, function(x)matrix(NA, nrow=4, ncol=6))
samp_data_list = lapply(1:ITE, function(x)matrix(NA))
samp_size = 500
samp_loc = sample(1:nrow(popn_data), size = samp_size, replace=F, prob = popn_data$inclusion)
samp_data = popn_data[samp_loc,]
## creating survey design
svy1 = svydesign(ids=~1, # cluster id, ~1 for no clusters
weights=~rep(1,nrow(samp_data)), # equal weights for each unit
data=samp_data)
## calculating population totals for each level
X1_margin = xtabs(~X1, data=popn_data)
setwd("~/Documents/GitHub/LOO_MRP/super popn experiment/01-code/expr1")
source('LOO_wtd_sim_popn_2.R')
samp_size = 500
samp_loc = sample(1:nrow(popn_data), size = samp_size, replace=F, prob = popn_data$inclusion)
samp_data = popn_data[samp_loc,]
## creating survey design
svy1 = svydesign(ids=~1, # cluster id, ~1 for no clusters
weights=~rep(1,nrow(samp_data)), # equal weights for each unit
data=samp_data)
## calculating population totals for each level
X1_margin = xtabs(~X1, data=popn_data)
X2_margin = xtabs(~X2, data=popn_data)
X3_margin = xtabs(~X3, data=popn_data)
X4_margin = xtabs(~X4, data=popn_data)
## raked to the population
rake1 = rake(design = svy1, sample.margins = list(~X1,~X2,~X3,~X4),
population.margins = list(X1_margin, X2_margin, X3_margin, X4_margin))
## raked weights ####
samp_data$wts = weights(rake1)
## factorise the relevant variables
str(samp_data)
ind = c(1:4,6)
samp_data[,ind] = apply(samp_data[,ind], 2, function(x)as.factor(x))
## four models ####
model1 = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model2 = brm(bin_value ~ (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model3 = brm(bin_value ~ (1|X3), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model4 = brm(bin_value ~ (1|X4), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
## comparing loo for two models, with weights and without weights
# calculating loo
loo1 <- loo(model1)
loo2 <- loo(model2)
loo3 <- loo(model3)
loo4 <- loo(model4)
loo_all = list(loo1, loo2, loo3, loo4)
popn_data
## make MRP estimates
popn_ps = popn_data %>%
group_by(X1, X2, X3, X4) %>%
summarise(Nj = n()) %>%
ungroup()
popn_ps
model1_predict = posterior_linpred(model1, newdata = popn_ps)
model1_predict
model1_predict = posterior_linpred(model1, newdata = popn_ps, transform = T)
model1_predict
hist(model1_predict)
## make MRP estimates
popn_ps = popn_data %>%
group_by(X1, X2, X3, X4) %>%
summarise(Nj = n()) %>%
ungroup() %>%
mutate(model1_predict = posterior_linpred(model1, newdata = ., transform = T))
dim(model1_predict)
length(popn_ps)
dim(popn_ps)
head(popn)
head(popn_ps)
model1_popnest = apply(model1_predict, 1, function(x)sum(x*popn_ps$Nj)/sum(popn_ps$Nj))
model1_popnest
dim(model1_popnest)
length(model1_popnest)
bin_outcome
popn_data$bin_outcome
mean(popn_data$bin_value)
prob_truth = mean(popn_data$bin_value)
prob_truth
model1_popnest
summary(model1_popnest)
prob_truth
model2_predict = posterior_linpred(model2, newdata = popn_ps, transform = T) # getting estimate for each cell
model2_popnest = apply(model2_predict, 1, function(x)sum(x*popn_ps$Nj)/sum(popn_ps$Nj)) # prob of outcome in the popn.
model3_predict = posterior_linpred(model3, newdata = popn_ps, transform = T) # getting estimate for each cell
model3_popnest = apply(model3_predict, 1, function(x)sum(x*popn_ps$Nj)/sum(popn_ps$Nj)) # prob of outcome in the popn.
model4_predict = posterior_linpred(model4, newdata = popn_ps, transform = T) # getting estimate for each cell
model4_popnest = apply(model4_predict, 1, function(x)sum(x*popn_ps$Nj)/sum(popn_ps$Nj)) # prob of outcome in the popn.
model2_popnest
summary(model2_popnest)
summary(model3_popnest)
summary(model4_popnest)
prob_truth
median(model1_popnest)
## extracting loo estimates to rank them
loo_tab = lapply(loo_all,function(x)x$estimates[1,]) %>% do.call(rbind,.) %>% data.frame(.)
rownames(loo_tab) = c(paste0('model',1:4))
colnames(loo_tab) = c('elpd_loo', 'SE')
# creating survey raked weights
svy_rake = svydesign(ids=~1, # cluster id, ~1 for no clusters
weights=~wts, # including raked weights in the survey design
data=samp_data)
loo_wtd_tab = lapply(loo_all, function(x)loo_wtd(x,svy_rake)) %>% do.call(rbind,.) %>% data.frame(.)
rownames(loo_wtd_tab) = c(paste0('model',1:4))
loo_rank = rank(-loo_tab[,1])
loo_wtd_rank = rank(-loo_wtd_tab[,1])
sim_list[[i]] = cbind(loo_tab, loo_wtd_tab, loo_rank, loo_wtd_rank)
samp_data <- samp_data %>%
mutate(elpd_1 = loo1$pointwise[,1],
elpd_2 = loo2$pointwise[,1],
elpd_3 = loo3$pointwise[,1],
elpd_4 = loo4$pointwise[,1])
head(samp_data)
head(popn_ps)
## MRP estimate of loo
samp_ps = samp_data %>%
group_by(X1,X2,X3,X4) %>%
summarise(nj = n()) %>%
ungroup()
samp_ps
## MRP estimate of loo
elpd_model1 = brm(elpd_1 ~ (1|X1), data = samp_data,
backend = "cmdstanr",
control = list(adapt_delta = 0.99))
elpd_model1_predict = posterior_predict(elpd_model1, newdata = popn_ps, transform = T) # getting estimate for each cell
elpd_model1_popnest = apply(elpd_model1_predict, 1, function(x)sum(x*popn_ps$Nj)/sum(popn_ps$Nj)) # prob of outcome in the popn.
elpd_model1_predict = posterior_predict(elpd_model1, newdata = popn_ps) # getting estimate for each cell
elpd_model1_popnest = apply(elpd_model1_predict, 1, function(x)sum(x*popn_ps$Nj)/sum(popn_ps$Nj)) # prob of outcome in the popn.
elpd_model1_predict
elpd_model1_popnest
summary(elpd_model1_popnest)
elpd_model1_popnest = apply(elpd_model1_predict, 1, function(x)sum(x*popn_ps$Nj))
summary(elpd_model1_popnest)
## MRP estimate of loo
elpd_model1 = brm(elpd_1 ~ (1|X1) + (1|X2) + (1|X3) + (1|X4), data = samp_data,
backend = "cmdstanr",
control = list(adapt_delta = 0.99))
elpd_model1_predict = posterior_predict(elpd_model1, newdata = popn_ps)
elpd_model1_popnest = apply(elpd_model1_predict, 1, function(x)sum(x*popn_ps$Nj)) ## equi
summary(elpd_model1_popnest)
