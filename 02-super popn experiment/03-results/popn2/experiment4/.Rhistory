'model14' = 'X2 + X3 + X4',
'model15' = 'X1 + X2 + X3 + X4')))
loop_tab$model = fct_relevel(loop_tab$model, c('X2 + X4', 'X1 + X2 + X4', 'X2 + X3 + X4', 'X1 + X2 + X3 + X4',
'X4', 'X1 + X4', 'X3 + X4', 'X1 + X3 + X4',
'X2', 'X1 + X2', 'X2 + X3', 'X1 + X2 + X3',
'X1', 'X3', 'X1 + X3'))
## plot all models together
g1 = ggplot(loop_tab, aes(x = LOOP.X50, y = model, group = iter, colour = model)) +
geom_point(position = position_dodge(width = .5)) +
geom_errorbarh(mapping = aes(xmin = LOOP.X5,
xmax = LOOP.X95),
position = position_dodge(width = .5),
height = 0, alpha = .7) +
theme(legend.position = "none",
axis.title = element_blank()) +
scale_y_discrete(limits = rev) +
scale_colour_manual(values = pals::tableau20(20)[c(1,2,9,10,3,4,7,8,13,14,5,6,17,18,12)]) +
labs(title="Raw LOOP values") +
annotate("label", x = -25000, y = 13.5, label = "X2 and X4") +
annotate("label", x = -8000, y = 9.5, label = "X4 only") +
annotate("label", x = -8000, y = 5.5,  label = "X2 only") +
annotate("label", x = -8000, y = 2, label = "None")
g1
## plot all models together
g1 = ggplot(loop_tab, aes(x = LOOP.X50, y = model, group = iter, colour = model)) +
geom_point(position = position_dodge(width = .5)) +
geom_errorbarh(mapping = aes(xmin = LOOP.X5,
xmax = LOOP.X95),
position = position_dodge(width = .5),
height = 0, alpha = .7) +
theme(legend.position = "none",
axis.title = element_blank()) +
scale_y_discrete(limits = rev) +
scale_colour_manual(values = pals::tableau20(20)[c(1,2,9,10,3,4,7,8,13,14,5,6,17,18,12)]) +
labs(title="Raw LOOP values [Binomial model]") +
annotate("label", x = -25000, y = 13.5, label = "X2 and X4") +
annotate("label", x = -8000, y = 9.5, label = "X4 only") +
annotate("label", x = -8000, y = 5.5,  label = "X2 only") +
annotate("label", x = -8000, y = 2, label = "None")
setwd("~/GitHub/LOO_MRP/02-super popn experiment/03-results/popn2/experiment4")
ggsave("plot_loop.png", g1, width=6, height=7.5, units="in", device="png")
setwd("~/GitHub/LOO_MRP/02-super popn experiment/01-code/popn2/experiment4")
## plotting lo(c)o values for all the models
## 24/01/22
library(ggplot2)
library(reshape2)
library(dplyr)
library(magrittr)
library(tidyverse)
## plotting prob of truth
ite = c(1:94,96:100)
samp_data_list2 = samp_data_list[ite]
sim_out = sapply(samp_data_list2, function(x)mean(x$outcome))
prob_truth = pt_list[ite]
plot(1:length(ite), prob_truth, ylim=c(0.45,.7), pch=1)
points(1:length(ite), sim_out, pch=19)
legend(78, 0.58, pch=c(19,1), legend = c('sample', 'popn'))
plot(sim_out, prob_truth, xlim=c(0.47,0.68), ylim=c(0.47,0.68), pch=19)
abline(a=0, b=1)
# unweighted loo ----------------------------------------------------------
## extracting elpd_loo
elpd_tab = sim_list1 %>%
lapply(., function(x)(x[,'elpd_loo'])) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
set_colnames(c(paste0('model0',1:9), paste0('model',10:15)))
elpd_se_tab = sim_list1 %>%
lapply(., function(x)(x[,'SE'])) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
set_colnames(c(paste0('model0',1:9), paste0('model',10:15)))
tmp1 = elpd_tab %>%
gather(elpd_tab, "total", model01:model15) %>%
rename(model = elpd_tab)
tmp2 = elpd_se_tab %>%
gather(elpd_se_tab, "SE", model01:model15) %>%
rename(model = elpd_se_tab)
elpd_se_tab2 = cbind(tmp1, tmp2[,-1]) %>%
rename(SE = "tmp2[, -1]") %>%
mutate(low_elpd = .$total - (.$SE*1.64), # calculating upper and lower bound of the elpd values
upp_elpd = .$total + (.$SE*1.64),
iter = rep(1:length(ite), 15))
pu = elpd_se_tab2 %>%
mutate(model = factor(model)) %>%
mutate(model = plyr::revalue(model, c('model01' = 'X1',
'model02' = 'X2',
'model03' = 'X3',
'model04' = 'X4',
'model05' = 'X1 + X2',
'model06' = 'X1 + X3',
'model07' = 'X1 + X4',
'model08' = 'X2 + X3',
'model09' = 'X2 + X4',
'model10' = 'X3 + X4',
'model11' = 'X1 + X2 + X3',
'model12' = 'X1 + X2 + X4',
'model13' = 'X1 + X3 + X4',
'model14' = 'X2 + X3 + X4',
'model15' = 'X1 + X2 + X3 + X4')))
pu$model = fct_relevel(pu$model, c('X2 + X4', 'X1 + X2 + X4', 'X2 + X3 + X4', 'X1 + X2 + X3 + X4',
'X4', 'X1 + X4', 'X3 + X4', 'X1 + X3 + X4',
'X2', 'X1 + X2', 'X2 + X3', 'X1 + X2 + X3',
'X1', 'X3', 'X1 + X3'))
## plotting all models
g2 = ggplot(pu, aes(x = total, y = model, group = iter, colour = model))+
geom_point(position = position_dodge(width = .5)) +
geom_errorbarh(mapping = aes(xmin = low_elpd,
xmax = upp_elpd),
position = position_dodge(width = .5),
height = 0, alpha = .5) +
theme(legend.position = "none",
axis.title = element_blank()) +
scale_y_discrete(limits = rev) +
scale_colour_manual(values = pals::tableau20(20)[c(1,2,9,10,3,4,7,8,13,14,5,6,17,18,12)]) +
labs(title="Raw elpd values (unweighted)") +
annotate("label", x = -200, y = 13.5, label = "X2 and X4") +
annotate("label", x = -60, y = 9.5, label = "X4 only") +
annotate("label", x = -60, y = 5.5,  label = "X2 only") +
annotate("label", x = -60, y = 2, label = "None")
g2
## plotting all models
g2 = ggplot(pu, aes(x = total, y = model, group = iter, colour = model))+
geom_point(position = position_dodge(width = .5)) +
geom_errorbarh(mapping = aes(xmin = low_elpd,
xmax = upp_elpd),
position = position_dodge(width = .5),
height = 0, alpha = .5) +
theme(legend.position = "none",
axis.title = element_blank()) +
scale_y_discrete(limits = rev) +
scale_colour_manual(values = pals::tableau20(20)[c(1,2,9,10,3,4,7,8,13,14,5,6,17,18,12)]) +
labs(title="Raw elpd values (unweighted) [Binomial model]") +
annotate("label", x = -200, y = 13.5, label = "X2 and X4") +
annotate("label", x = -60, y = 9.5, label = "X4 only") +
annotate("label", x = -60, y = 5.5,  label = "X2 only") +
annotate("label", x = -60, y = 2, label = "None")
## plotting all models
g2 = ggplot(pu, aes(x = total, y = model, group = iter, colour = model))+
geom_point(position = position_dodge(width = .5)) +
geom_errorbarh(mapping = aes(xmin = low_elpd,
xmax = upp_elpd),
position = position_dodge(width = .5),
height = 0, alpha = .5) +
theme(legend.position = "none",
axis.title = element_blank()) +
scale_y_discrete(limits = rev) +
scale_colour_manual(values = pals::tableau20(20)[c(1,2,9,10,3,4,7,8,13,14,5,6,17,18,12)]) +
labs(title="Raw elpd values (unweighted) [Binomial model]") +
annotate("label", x = -200, y = 13.5, label = "X2 and X4") +
annotate("label", x = -60, y = 9.5, label = "X4 only") +
annotate("label", x = -60, y = 5.5,  label = "X2 only") +
annotate("label", x = -60, y = 2, label = "None")
g2
setwd("~/GitHub/LOO_MRP/02-super popn experiment/03-results/popn2/experiment4")
setwd("~/GitHub/LOO_MRP/02-super popn experiment/03-results/popn2/experiment4")
ggsave("plot_loo_raw_unwtd.png", g2, width=6, height=7.5, units="in", device="png")
model01
model01$forum
model01$formula
model02 = brm(bin_value ~ (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model02$formula
model2_predict = posterior_linpred(model02, newdata = popn_ps, transform = T) # getting estimate for each cell
model2_predict
apply(model2_predict,2,mean)
hist(apply(model2_predict,2,mean))
hist(apply(model2_predict,2,median))
model2_popnest = apply(model2_predict, 1, function(x)sum(x*popn_ps$Nj)/sum(popn_ps$Nj)) # prob of outcome in the popn.
model2_popnest
## make MRP estimates
popn_ps = popn_data %>%
group_by(X1, X2, X3, X4) %>%
summarise(Nj = n()) %>%
ungroup()
model2_popnest = apply(model2_predict, 1, function(x)sum(x*popn_ps$Nj)/sum(popn_ps$Nj)) # prob of outcome in the popn.
model2_popnest
hist(model2_popnest)
model1_predict = posterior_linpred(model01, newdata = popn_ps, transform = T) # getting model estimate for each cell
## make MRP estimates
popn_ps = popn_data %>%
group_by(X1, X2, X3, X4) %>%
summarise(Nj = n(), n_j = n()) %>%
ungroup()
model1_predict = posterior_linpred(model01, newdata = popn_ps, transform = T) # getting model estimate for each cell
model1_predict
apply(model1_predict,1,mean)
hist(apply(model1_predict,1,mean))
samp_ps
## make MRP estimates
popn_ps = popn_data %>%
group_by(X1, X2, X3, X4) %>%
summarise(Nj = n()) %>%
ungroup()
model1_predict = posterior_linpred(model01, newdata = popn_ps, transform = T) # getting model estimate for each cell
## make MRP estimates
popn_ps = popn_data %>%
group_by(X1, X2, X3, X4) %>%
summarise(Nj = n(), n_j = n()) %>%
ungroup()
model1_predict = posterior_linpred(model01, newdata = popn_ps, transform = T) # getting model estimate for each cell
model1_predict = posterior_linpred(model01, newdata = popn_ps, transform = T) # getting model estimate for each cell
model1_popnest = posterior_linpred(model01, newdata = popn_ps, transform = T) # getting model estimate for each cell
model1_popnest
apply(model1_popnest,2,mean)
hist(apply(model1_popnest,2,mean))
hist(apply(model1_predict,2,mean))
hist(apply(model1_predict,2,median))
hist(popn_data$outcome)
model1_popnest = posterior_linpred(model01, newdata = popn_ps, transform = T) # getting model estimate for each cell
model2_predict = posterior_linpred(model02, newdata = popn_ps, transform = T) # getting estimate for each cell
hist(apply(model1_popnest,2,median))
hist(apply(model2_predict,2,median))
model02
model01
samp_ps$sum_y/samp_ps$n_j
hist(samp_ps$sum_y/samp_ps$n_j)
predict(model01)
posterior_linpred()
?posterior_linpred
model01
model02
model01$ranef
model01$fit
model01$prior
model01$fit
model01$version
model01$data
model01$save_pars
model01$formula
posterior_linpred(model01, transform=T)
popn_ps
hist(posterior_linpred(model01, transform=T))
hist(apply(posterior_linpred(model01, transform=T),2, mean)
)
## make MRP estimates
popn_ps = popn_data %>%
group_by(X1, X2, X3, X4) %>%
summarise(Nj = n(), n_j = n(), sum_y = sum(bin_value)) %>%
ungroup()
model1_popnest = posterior_linpred(model01, newdata = popn_ps, transform = T) # getting model estimate for each cell
model1_popnest
apply(model1_popnest,2,mean)
popn_ps$sum_y / popn_ps$n_j
hist(popn_ps$sum_y / popn_ps$n_j)
hist(popn_ps$sum_y / popn_ps$Nj)
bin_value
popn_data$bin_value
popn_ps$sum_y
popn_ps$bin_value
popn_ps$Nj
popn_ps$sum_y / popn_ps$Nj
hist(popn_ps$sum_y / popn_ps$Nj)
hist(samp_ps$sum_y / samp_ps$n_j)
model15 = brm(sum_y | trials(n_j) ~ (1|X1) + (1|X2) + (1|X3) + (1|X4), data = samp_ps,
backend = "cmdstanr",
family = binomial(link = "logit"),
control = list(adapt_delta = 0.99))
model15_predict = posterior_linpred(model15, newdata = popn_ps, transform = T) # getting estimate for each cell
model15_predict
apply(model15_predict,2,mean)
hist(apply(model15_predict,2,mean))
library(tidyverse)
library(brms) # need cmdstanr to use with brms
library(loo) # calculating loo and elpd
library(survey) # creating raked weights
options(mc.cores = 1)
## generating 5 continuous predictors/covariates
N = 10000
## generating a binary outcome
# weakly predictive - 0.1 (sd), strongly predictive - 1 (sd)
set.seed(65438)
pn = 100 # number of population
seed = round(runif(pn, min=10, max=100000),0) # fixed seed number
ITE=4
# setting seed using array ID
set.seed(seed[ITE])
popn_data <- data.frame(X1_cont = rnorm(N, 0, 2),
X2_cont = rnorm(N, 0, 2),
X3_cont = rnorm(N, 0, 2),
X4_cont = rnorm(N, 0, 2))
wkly1 = 0.1
strg1 = 1
## generating continuous and binary outcome
popn_data$outcome <- inv_logit_scaled(wkly1*popn_data$X1_cont +
strg1*popn_data$X2_cont +
wkly1*popn_data$X3_cont +
strg1*popn_data$X4_cont)
popn_data$bin_value <- as.numeric(rbinom(N,1,popn_data$outcome))
## generate inclusion prob. for each individual
# weakly predictive - 0.1 (sd), strongly predictive - 1 (sd)
wkly2 = 0.1
strg2 = 1
popn_data$incl_prob <- inv_logit_scaled(wkly2*popn_data$X1_cont +
wkly2*popn_data$X2_cont +
strg2*popn_data$X3_cont +
strg2*popn_data$X4_cont)
## categorising the continuous covariates
J = 5
popn_data <- popn_data %>%
mutate(X1_fct = cut_interval(X1_cont,J),
X2_fct = cut_interval(X2_cont,J),
X3_fct = cut_interval(X3_cont,J),
X4_fct = cut_interval(X4_cont,J)) %>%
mutate(across(X1_fct:X4_fct, ~ as.numeric(.x)))
df <- popn_data %>%
pivot_longer(c(X1_fct:X4_fct, X1_cont:X4_cont),
names_to = c("variable","type"),
values_to = "value",
names_sep = "_") %>%
filter(type=="fct")
popn_data <- popn_data %>%
rename(X1 = X1_fct,
X2 = X2_fct,
X3 = X3_fct,
X4 = X4_fct)
## generating samples
samp_size = 500
samp_loc = sample(1:nrow(popn_data), size = samp_size-(J*4), replace=F, prob = popn_data$incl_prob)
## making sure at least each level of the covariates are sampled
for(j in 1:J){
samp_loc[length(samp_loc)+1] = sample(which(popn_data$X1 == j), size=1)
samp_loc[length(samp_loc)+1] = sample(which(popn_data$X2 == j), size=1)
samp_loc[length(samp_loc)+1] = sample(which(popn_data$X3 == j), size=1)
samp_loc[length(samp_loc)+1] = sample(which(popn_data$X4 == j), size=1)
}
samp_data = popn_data[samp_loc,]
# random sample
samp_loc2 = sample(1:nrow(popn_data), size = samp_size)
samp_data2 = popn_data[samp_loc2,]
## factorise the relevant variables
str(samp_data)
ind = c(8:11)
samp_data[,ind] = apply(samp_data[,ind], 2, function(x)as.factor(x))
## make poststratification table for sample
samp_ps = samp_data %>%
group_by(X1, X2, X3, X4) %>%
summarise(n_j = n(), sum_y = sum(bin_value)) %>%
ungroup()
## all models ####
model01 = brm(sum_y | trials(n_j) ~ (1|X1), data = samp_ps,
backend = "cmdstanr",
family = binomial(link = "logit"),
control = list(adapt_delta = 0.99))
modelbern = brm(bin_value ~ (1|X1), data = samp_ps,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
modelbern = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", class="ar"))
get_prior
get_prior(modelbern)
prior_summary(modelbern)
get_prior
get_prior()
get_prior(bin_value ~ (1|X1))
get_prior(bin_value ~ (1|X1), data=samp_data)
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", class="sd", coef="Intercept"))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", class="sd"))
prior_summary(model_test)
prior_summary(modeltest)
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", coef="Intercept"))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", class="sd", coef="Intercept"))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", coef=Intercept))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", class=ar))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", class="ar"))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", class="ar", coef="Intercept"))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", class="sd", coef="Intercept"))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", class="X1", coef="Intercept"))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", group="X1", coef="Intercept"))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("normal(0,10)", class="sd", group="X1", coef="Intercept"))
prior_summary(modeltest)
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("ar(1)", class="sd", group="X1", coef="Intercept"))
modeltest = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("ar(p=1)", class="sd", group="X1", coef="Intercept"))
modeltest2 = brm(bin_value ~ (1|X1), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
autocor = cor_arma(~1|X1,1))
prior_summary(modeltest2)
modeltest2
prior_summary(modeltest2)
modeltest2$formula
model02 = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99))
model02
model02a = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
autocor = cor_arma(~1|X1,1),
autocor = cor_arma(~1|X2,1))
model02a = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
autocor = c(cor_arma(~1|X1,1),cor_arma(~1|X2,1)))
model02a
model02
prior_summary(model02a)
prior_summary(model02)
model02b = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("ar(p=1)", class="sd", coef="Intercept"))
model02b = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior(c("ar(p=1)", class="sd", group="X1", coef="Intercept",
"ar(p=1)", class="sd", group="X2", coef="Intercept" )))
model02b = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior(c("ar(p=1)", class="sd", group="X1", coef="Intercept")))
model02b = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("ar(p=1)", class="sd", group="X1", coef="Intercept")))
model02b = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("ar(p=1)", class="sd", coef="Intercept"))
, group="X1"
model02b = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
set_prior("ar(p=1)", class="sd", group="X1", coef="Intercept"))
modeltest2
modeltest2$formula
model02a = brm(bin_value ~ (1|X1) + (1|X2), data = samp_data,
backend = "cmdstanr",
family = bernoulli(link = "logit"),
control = list(adapt_delta = 0.99),
autocor = c(cor_arma(~1|X1 + ~1|X2,1)))
model02a$formula
prior_summary(model02a)
model02a
model02a
model02
?brmsformula
